---
description:
globs:
alwaysApply: false
---
# MyBatis Plus 使用指南

## 概述
项目已集成 MyBatis Plus 3.5.5，可以与原生 MyBatis 共存。MyBatis Plus 是 MyBatis 的增强工具，简化开发、提高效率。

## 配置文件
- MyBatis Plus 配置类: [MybatisPlusConfig.java](mdc:xinletu-framework/src/main/java/com/xinletu/framework/config/MybatisPlusConfig.java)
- 自动填充处理器: [MybatisPlusMetaObjectHandler.java](mdc:xinletu-framework/src/main/java/com/xinletu/framework/config/MybatisPlusMetaObjectHandler.java)
- 应用配置: [application.yml](mdc:xinletu-admin/src/main/resources/application.yml)

## 实体类注解
实体类中可以使用以下注解：

```java
@TableName("sys_user")              // 指定表名
@TableId(type = IdType.AUTO)        // 指定主键及生成策略
@TableField("column_name")          // 指定字段名
@TableField(exist = false)          // 非数据库字段
@TableField(fill = FieldFill.INSERT) // 插入时自动填充
@TableLogic                         // 逻辑删除字段
@Version                            // 乐观锁字段
```

## Mapper 接口
继承 BaseMapper 接口获取通用 CRUD 方法：

```java
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.xinletu.system.domain.SysUser;

public interface SysUserMapper extends BaseMapper<SysUser> {
    // 自定义方法...
}
```

## 常用方法示例

### 插入数据
```java
// 插入一条记录
sysUserMapper.insert(user);
```

### 查询数据
```java
// 根据 ID 查询
SysUser user = sysUserMapper.selectById(1L);

// 条件查询
QueryWrapper<SysUser> queryWrapper = new QueryWrapper<>();
queryWrapper.eq("user_name", "admin").like("nick_name", "管理员");
List<SysUser> userList = sysUserMapper.selectList(queryWrapper);

// Lambda 条件查询（类型安全）
LambdaQueryWrapper<SysUser> lambdaQuery = new LambdaQueryWrapper<>();
lambdaQuery.eq(SysUser::getUserName, "admin").like(SysUser::getNickName, "管理员");
List<SysUser> userList = sysUserMapper.selectList(lambdaQuery);

// 分页查询
Page<SysUser> page = new Page<>(1, 10);
Page<SysUser> userPage = sysUserMapper.selectPage(page, lambdaQuery);
```

### 更新数据
```java
// 根据 ID 更新
sysUserMapper.updateById(user);

// 条件更新
LambdaUpdateWrapper<SysUser> updateWrapper = new LambdaUpdateWrapper<>();
updateWrapper.eq(SysUser::getUserId, 1L).set(SysUser::getStatus, "1");
sysUserMapper.update(null, updateWrapper);
```

### 删除数据
```java
// 根据 ID 删除
sysUserMapper.deleteById(1L);

// 条件删除
LambdaQueryWrapper<SysUser> deleteWrapper = new LambdaQueryWrapper<>();
deleteWrapper.eq(SysUser::getDeptId, 2L);
sysUserMapper.delete(deleteWrapper);
```

## 注意事项
1. 实体类需要有主键字段，建议使用 `@TableId` 注解标识
2. 创建时间、更新时间等字段会自动填充，无需手动设置
3. 如果同时使用 MyBatis 和 MyBatis Plus，XML 文件中的 SQL 语句仍然有效
4. 逻辑删除字段配置后，delete 操作会自动转为更新操作
