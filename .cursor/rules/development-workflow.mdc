---
description:
globs:
alwaysApply: false
---
# 开发工作流

## 项目启动
1. 启动后端服务：
   - 运行 [RuoYiApplication.java](mdc:xinletu-admin/src/main/java/com/xinletu/RuoYiApplication.java)

2. 启动前端服务：
   - 进入 xinletu-ui 目录
   - 执行 `npm install` 安装依赖
   - 执行 `npm run dev` 启动开发服务器

## 代码生成
使用代码生成器可以快速创建新的业务模块：
1. 访问系统的代码生成功能
2. 选择数据库表
3. 配置生成选项
4. 生成代码并下载

## 样式开发规范
1. 使用 Element Plus 组件库
2. 遵循项目已有的样式风格
3. 使用 SCSS 预处理器
4. 页面组件样式使用 scoped 属性
5. 通用样式放在全局样式文件中

## UI组件样式指南
1. 搜索表单：
   - 使用卡片式样式，带有阴影和圆角
   - 搜索按钮使用主题色
   - 重置按钮使用默认样式

2. 表格：
   - 使用圆角和阴影效果
   - 表格行添加悬停效果
   - 操作按钮使用 flex 布局居中对齐

3. 按钮区域：
   - 操作按钮间距保持一致
   - 添加悬停动画效果
   - 按钮图标和文字对齐

4. 对话框：
   - 表单项布局整齐
   - 底部按钮右对齐
   - 确认按钮使用主题色

## 代码提交规范
1. 提交前进行代码格式化
2. 提交信息格式：`类型(模块): 描述`
   - 类型：feat(新功能)、fix(修复)、docs(文档)、style(样式)、refactor(重构)、perf(性能优化)、test(测试)、chore(构建/工具)
   - 模块：涉及的功能模块
   - 描述：简明扼要的变更描述

## 最佳实践
1. 遵循 RESTful API 设计规范
2. 使用统一的错误处理机制
3. 前端组件复用，避免重复代码
4. 使用 Vuex 管理全局状态
5. 权限控制基于角色和菜单
6. 表单验证统一使用 Element Plus 的验证规则
